@layout('admin.master')
@section('body')


<div id="root_app" class="container">
<div class="row">
    <h2 class="col-sm-12 page-header">จัดการตารางสอบ</h2>
    <div class="tch-panel-control-fluid row">
    <div class="col-sm-3">
        <div class="input-group">
            <span class="input-group-addon">เทอม</span>
            <select @change="on_select_term($event)" class="form-control">
                <option value="-1">เลือกเทอม</option>
                <option v-for="(term, index) in terms" :value="term.term_id" >@{{ 'ปี ' + (parseInt(term.term_year) + 543) + " เทอม " + term.term }}</option>
            </select>
        </div>
    </div>
    <div class="col-sm-2">
        <div class="btn-group">
        <button :class="['btn', 'btn-default', type_selected == 'Mid' ? 'active' : '' ]" @click="on_type_selected($event)" data-value="Mid">
         กลางภาค</button>
        <button :class="['btn', 'btn-default', type_selected == 'Final' ? 'active' : '']" @click="on_type_selected($event)" data-value="Final">
         ปลายภาค</button>
         </div>
    </div>
    <!-- <div class="col-sm-4">
        <form @submit.prevent="search_items($event)">
        <div class="input-group">
            <input name="search" type="text" class="form-control" placeholder="ค้นหาจาก ... " />
            <span class="input-group-btn">
                <button class="btn btn-default">ค้นหา <i class="fa fa-search"></i></butotn>
            <span>
        </div>
        </form>
    </div> -->
    <div class="col-sm-7 text-right">
        <button :disabled="term_selected == -1 || type_selected == -1" class="btn btn-lg btn-default" @click="on_print()"><i class="fa fa-print"></i> พิมพ์</button>
        <button onclick="$('#add_modal').modal('show')" class="btn btn-lg btn-default"><i class="fas fa-plus text-success"></i> เพิ่ม</button>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="tch-shadow-sm  panel panel-default">
            <div class="panel-body">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th class="text-center">ลำดับ</th>
                            <th>วันที่สอบ</th>
                            <th>เวลา</th>
                            <th>รหัส</th>
                            <th>วิชา</th>
                            <!--<th>อาจารย์คุมสอบ</th> -->
                            <th>กลุ่ม</th>
                            <th>ห้อง</th>
                            <th>การสอบ</th>
                            <th>ลำดับ</th>
                            <th>ลบ</th>
                            <th>แก้ไข</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template v-if="items_filtered.length > 0">
                            <tr v-for="(item, index) in items_filtered" :key="index">
                                <td class="text-center">@{{ ++index }}</td>
                                <td>@{{ formatDate(item.date) }}</td>
                                <td>@{{ item.start_time + "-" + item.end_time }}</td>
                                <td>@{{ item.subject.subject_code }}</td>
                                <td>@{{ item.subject.subject_name }}</td>
                                <!-- <td>@{{ item.teacher.teacher_name }}</td> -->
                                <td>@{{ item.group.student_group_name }}</td>
                                <td>@{{ item.room.study_room_code }}</td>
                                <td>@{{ item.type == 'Final' ? 'ปลายภาค' : 'กลางภาค' }}</td>
                                <td>@{{ item.range_start + "-" + item.range_end }}</td>
                                <td><button
                                    :data-status="item.status == 'A' ? 'D' : 'A'"
                                    :data-id="item.test_id"
                                    @click="update_status($event)"
                                    class="btn btn-xs btn-danger">
                                    <i class="fas fa-trash"></i> ลบ</button>
                                </td>
                                <td><button @click="on_clik_edit($event)" :data-id="item.test_id" class="btn btn-default"><i class="fas fa-edit"></i></button></td>
                            </tr>
                        </template>
                        <template v-else>
                            <tr>
                                <td colspan="12" class="text-center text-muted">ไม่พบข้อมูล</td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
</div>


<div id="add_modal" class="modal animated fadeIn" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title">เพิ่มห้องสอบ</h4>
      </div>
      <div class="modal-body">
        <form @submit.prevent="add_item_submit($event)" class="form form-horizontal">
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-validate="'required|not_in:-1'" class="form-control" name="term">
                      <option value="-1">เลือกเทอม</option>
                      <option v-for="(term, index) in terms" :value="term.term_id" >@{{ 'ปี ' + (parseInt(term.term_year) + 543) + " เทอม " + term.term }}</option>
                    </select>
                    <p v-if="errors.has('term')" class="help-text text-danger">@{{ errors.first('term') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-validate="'required|not_in:-1'" class="form-control" name="subject">
                      <option value="-1">เลือกวิชา</option>
                      <option v-for="(subject, index) in subjects" :value="subject.subject_id">@{{ subject.subject_name + " (" + subject.subject_code + ")" }}</option>
                    </select>
                    <p v-if="errors.has('subject')" class="help-text text-danger">@{{ errors.first('subject') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-validate="'required|not_in:-1'" class="form-control" name="room">
                      <option value="-1">เลือกห้องสอบ</option>
                      <option v-for="(room, index) in rooms" :value="room.study_room_id">@{{ room.study_room_code }}</option>
                    </select>
                    <p v-if="errors.has('room')" class="help-text text-danger">@{{ errors.first('room') }}</p>
                </div>
            </div>
            <!--  <div class="form-group">
                <div class="col-sm-12">
                    <select v-validate="'required|not_in:-1'" class="form-control" name="teacher">
                      <option value="-1">อาจารย์คุมสอบ</option>
                      <option v-for="(teacher, index) in teachers" :value="teacher.teacher_id">@{{ teacher.teacher_name + " (" + teacher.teacher_code + ")" }}</option>
                    </select>
                    <p v-if="errors.has('teacher')" class="help-text text-danger">@{{ errors.first('teacher') }}</p>
                </div>
            </div> -->
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-validate="'required|not_in:-1'" class="form-control" name="group">
                      <option value="-1">กลุ่ม</option>
                      <option v-for="(group, index) in groups" :value="group.student_group_id">@{{ group.student_group_name }}</option>
                    </select>
                    <p v-if="errors.has('group')" class="help-text text-danger">@{{ errors.first('group') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <div class="input-group">
                    <input type="text" name="date" class="datepicker form-control" placeholder="วันที่สอบ" />
                    <span class="input-group-addon">เวลา</span>
                    <select @change="on_start_time_change($event)" v-model="start_selected" v-validate="'required|not_in:-1'" name="start" class="form-control">
                        <option value="-1">เวลาเริ่มต้น</option>
                        <option v-for="(time, index) in time_list" :value="time.start.toFormat('HH:mm')" >@{{ time.start.toFormat("HH:mm") }}</option>
                    </select>
                    <span class="input-group-addon">ถึง</span>
                    <select @change="on_end_time_change($event)" v-model="end_selected" v-validate="'required|not_in:-1'" name="end" class="form-control">
                        <option value="-1">เวลาสิ้นสุด</option>
                        <option v-for="(time, index) in time_list" :value="time.end.toFormat('HH:mm')" >@{{ time.end.toFormat("HH:mm") }}</option>
                    </select>
                    </div>
                    <p v-if="errors.has('date')" class="help-text text-danger">@{{ errors.first('date') }}</p>
                    <p v-if="errors.has('start')" class="help-text text-danger">@{{ errors.first('start') }}</p>
                    <p v-if="errors.has('end')" class="help-text text-danger">@{{ errors.first('end') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-validate="'required|not_in:-1'" class="form-control" name="type">
                      <option value="-1">การสอบ</option>
                      <option value="Mid">กลางภาค</option>
                      <option value="Final">ปลายภาค</option>
                    </select>
                    <p v-if="errors.has('type')" class="help-text text-danger">@{{ errors.first('type') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <div class="input-group">
                        <span class="input-group-addon">ลำดับ</span>
                        <input type="number" min="1" class="form-control" name="range_start" placeholder="เริ่มต้น" />
                        <span class="input-group-addon">ถึง</span>
                        <input type="number" min="1" class="form-control" name="range_end" placeholder="สิ้นสุด" />
                    </div>
                    <p v-if="errors.has('range_start')" class="help-text text-danger">@{{ errors.first('range_start') }}</p>
                    <p v-if="errors.has('range_end')" class="help-text text-danger">@{{ errors.first('range_end') }}</p>
                </div>
            </div>
            <button class="hidden" id="add_button"></button>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">ปิด</button>
        <button type="button" onclick="$('#add_button').click()" class="btn btn-success">เพิ่ม</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->


</div>




<div id="update_modal" class="modal animated fadeIn" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title">แก้ไขตารางสอบ</h4>
      </div>
      <div v-if="item != null" class="modal-body">
        <form @submit.prevent="update_item_submit($event)" class="form form-horizontal">
            <input type="hidden" name="id" :value="item.test_id" />
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-model="item.term_id" v-validate="'required|not_in:-1'" class="form-control" name="term">
                      <option value="-1">เลือกเทอม</option>
                      <option v-for="(term, index) in terms" :value="term.term_id" >@{{ 'ปี ' + (parseInt(term.term_year) + 543) + " เทอม " + term.term }}</option>
                    </select>
                    <p v-if="errors.has('term')" class="help-text text-danger">@{{ errors.first('term') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-model="item.subject_id" v-validate="'required|not_in:-1'" class="form-control" name="subject">
                      <option value="-1">เลือกวิชา</option>
                      <option v-for="(subject, index) in subjects" :value="subject.subject_id">@{{ subject.subject_name + " (" + subject.subject_code + ")" }}</option>
                    </select>
                    <p v-if="errors.has('subject')" class="help-text text-danger">@{{ errors.first('subject') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-model="item.study_room_id" v-validate="'required|not_in:-1'" class="form-control" name="room">
                      <option value="-1">เลือกห้องสอบ</option>
                      <option v-for="(room, index) in rooms" :value="room.study_room_id">@{{ room.study_room_code }}</option>
                    </select>
                    <p v-if="errors.has('room')" class="help-text text-danger">@{{ errors.first('room') }}</p>
                </div>
            </div>
            <!-- <div class="form-group">
                <div class="col-sm-12">
                    <select v-model="item.teacher_id" v-validate="'required|not_in:-1'" class="form-control" name="teacher">
                      <option value="-1">อาจารย์คุมสอบ</option>
                      <option v-for="(teacher, index) in teachers" :value="teacher.teacher_id">@{{ teacher.teacher_name + " (" + teacher.teacher_code + ")" }}</option>
                    </select>
                    <p v-if="errors.has('teacher')" class="help-text text-danger">@{{ errors.first('teacher') }}</p>
                </div>
            </div> -->
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-model="item.student_group_id" v-validate="'required|not_in:-1'" class="form-control" name="group">
                      <option value="-1">กลุ่ม</option>
                      <option v-for="(group, index) in groups" :value="group.student_group_id">@{{ group.student_group_name }}</option>
                    </select>
                    <p v-if="errors.has('group')" class="help-text text-danger">@{{ errors.first('group') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <div class="input-group">
                    <input v-model="item.date" type="text" name="date" class="datepicker form-control" placeholder="วันที่สอบ" />
                    <span class="input-group-addon">เวลา</span>
                    <select @change="on_start_time_change($event)" v-model="item.start_time" v-validate="'required|not_in:-1'" name="start" class="form-control">
                        <option value="-1">เวลาเริ่มต้น</option>
                        <option v-for="(time, index) in time_list" :value="time.start.toFormat('HH:mm')" >@{{ time.start.toFormat("HH:mm") }}</option>
                    </select>
                    <span class="input-group-addon">ถึง</span>
                    <select @change="on_end_time_change($event)" v-model="item.end_time" v-validate="'required|not_in:-1'" name="end" class="form-control">
                        <option value="-1">เวลาสิ้นสุด</option>
                        <option v-for="(time, index) in time_list" :value="time.end.toFormat('HH:mm')" >@{{ time.end.toFormat("HH:mm") }}</option>
                    </select>
                    </div>
                    <p v-if="errors.has('date')" class="help-text text-danger">@{{ errors.first('date') }}</p>
                    <p v-if="errors.has('start')" class="help-text text-danger">@{{ errors.first('start') }}</p>
                    <p v-if="errors.has('end')" class="help-text text-danger">@{{ errors.first('end') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <select v-model="item.type" v-validate="'required|not_in:-1'" class="form-control" name="type">
                      <option value="-1">การสอบ</option>
                      <option value="Mid">กลางภาค</option>
                      <option value="Final">ปลายภาค</option>
                    </select>
                    <p v-if="errors.has('type')" class="help-text text-danger">@{{ errors.first('type') }}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <div class="input-group">
                        <span class="input-group-addon">ลำดับ</span>
                        <input v-model="item.range_start" type="number" min="1" class="form-control" name="range_start" placeholder="เริ่มต้น" />
                        <span class="input-group-addon">ถึง</span>
                        <input v-model="item.range_end" type="number" min="1" class="form-control" name="range_end" placeholder="สิ้นสุด" />
                    </div>
                    <p v-if="errors.has('range_start')" class="help-text text-danger">@{{ errors.first('range_start') }}</p>
                    <p v-if="errors.has('range_end')" class="help-text text-danger">@{{ errors.first('range_end') }}</p>
                </div>
            </div>
            <button class="hidden" id="edit_button"></button>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">ปิด</button>
        <button type="button" onclick="$('#edit_button').click()" class="btn btn-success">แก้ไขข้อมูล</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
</div>

@endsection


@section('script')
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/css/bootstrap-datepicker3.min.css" />
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/js/bootstrap-datepicker.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/locales/bootstrap-datepicker.th.min.js"></script>

<script>

    window.TERMS = {{{ terms }}}
    window.GROUPS = {{{ groups }}}
    window.ROOMS = {{{ rooms }}}
    window.SUBJECTS = {{{ subjects }}}
    window.TEACHERS = {{{ teachers }}}

    Vue.use(VeeValidate);

    var root_app = new Vue({
        el: '#root_app',
        data: function() {
            return {
                terms: TERMS,
                groups: GROUPS,
                rooms: ROOMS,
                subjects: SUBJECTS,
                teachers: TEACHERS,
                items: [],
                term_selected: -1,

                type_selected: -1,

                start_selected: -1,
                end_selected: -1
            };
        },
        computed: {
            items_filtered: function() {
                var self = this;
                return this.items.filter(function(item) {
                    return item.type == self.type_selected;
                })
            },
            time_list: function() {
                var dt = luxon.DateTime;
                var inv = luxon.Interval;
                var start = dt.fromObject({ hours: 6 });
                var end = dt.fromObject({ hours: 23, minutes: 59 })
                var interval = inv.fromDateTimes(start, end);
                return interval.splitBy({ minutes: 15 });
            }
        },
        methods: {
            formatDate: function(date) {
                let splited = date.split("/")
                let year = parseInt(splited[splited.length - 1]) + 543
                return [splited[0], splited[1], year].join("/")
                //return luxon.DateTime.fromFormat(date, "dd-LL-yyyy").plus({ years: 543 }).toFormat("dd-LL-yyyy")
            },
            on_print: function() {
                window.open("/report/test?term=" + this.term_selected + "&type=" + this.type_selected);
            },
            on_type_selected: function(evt) {
                this.type_selected = evt.target.dataset.value;
            },
            on_start_time_change: function(evt) {

                var dt = luxon.DateTime;

                if(this.item.start_time != -1 && this.item.end_time != -1) {
                    if(dt.fromFormat(evt.target.value, 'HH:mm') < dt.fromFormat(this.item.end_time, 'HH:mm')) {
                        return this.item.start_time = evt.target.value;
                    } else {
                        window.swal("Error", "เวลาเริ่มต้นต้องน้อยกว่าเวลาสิ้นสุด", "error");
                        return this.item.start_time = -1;
                    }
                } else {
                    return this.item.start_time = evt.target.value;
                }
            },
            on_end_time_change: function(evt) {

                var dt = luxon.DateTime;

                if(this.item.start_time != -1 && this.item.end_time != -1) {
                    if(dt.fromFormat(this.item.start_time, 'HH:mm') < dt.fromFormat(evt.target.value, 'HH:mm')) {
                        return this.item.end_time = evt.target.value;
                    } else {
                        window.swal("Error", "เวลาเริ่มต้นต้องน้อยกว่าเวลาสิ้นสุด", "error");
                        return this.item.end_time = -1;
                    }
                } else {
                    return this.item.end_time = evt.target.value;
                }
            },
            on_clik_edit: function(evt) {
                console.log("item_id", evt.currentTarget.dataset.id);
                this.$emit('edit', evt.currentTarget.dataset.id);
            },
            on_select_term: function(evt) {
                this.term_selected = evt.target.value;
                this.fetch_items();
            },
            search_items: function(evt) {
                var self = this;
                axios.get('{{ route("admin_study_room_search") }}?search=' + evt.target.search.value).then(function(res) {
                  var data = res.data;
                  if(data.is_error) {
                    console.log(data.error_message);
                    return window.swal("Error", data.error_message);
                  }
                  self.items = data.data;
                })
                .catch(function(error) {
                    console.log(error);
                    return window.swal("Error", error.toString());
                });
            },
            fetch_items: function() {
                var self = this;
                NProgress.start();
                axios.get('{{ route("admin_test_all") }}', {
                    params: {
                        status: 'A',
                        term: self.term_selected
                    }
                }).then(function(res) {
                    NProgress.done();
                    console.log(res);
                    var data = res.data;
                    if(data.is_error) {
                        window.swal("Error", data.error_message, "error");
                        console.log(data.error_message);
                        return;
                    }
                    self.items = data.data;
                });
            },
            update_status: function(evt) {
                if(!window.confirm("ยืนยันการลบ")) return;
                var self = this;
                var status = evt.currentTarget.dataset.status;
                var id = evt.currentTarget.dataset.id;
                axios.post('{{ route("admin_test_update_status") }}', { id: id, status: status })
                .then(function(res) {
                    var data = res.data;
                    if(data.is_error) {
                        console.log(data.error_message);
                        return window.swal("Error", data.error_message, "error");
                    }
                    window.swal("Success", "อัพเดทสถานะเรียบร้อยแล้ว", "success");
                    self.fetch_items();
                }).catch(function(error) {
                    console.log(error);
                    window.swal("Error", error, "error");
                });
            },
            add_item_submit: function(evt) {
                var self = this;
                this.$validator.validateAll().then(function(passed) {

                    if(!passed) {
                       return window.alert("กรุณากรอกข้อมูลให้ถูกต้อง")
                    }

                    var data = new FormData(evt.target);
                    axios.post('{{ route("admin_add_test") }}', data).then(function(res) {
                        console.log(res);
                        var data = res.data;
                        if(data.is_error) {
                            window.swal("Error", data.error_message, "error");
                            return console.log(data.error_message);
                        }
                        window.swal("Success", "เพิ่มเรียบร้อยแล้ว", "success");
                        $('#add_modal').modal('hide');
                        self.fetch_items();
                    });
                });
            }
        },
        created: function() {
            var self = this;
            this.fetch_items();
            this.$nextTick(function() {
                update_modal.$on('updated', function() {
                    self.fetch_items();
                });
            })
        },
        mounted: function() {
            $('.datepicker').datepicker({
                format: "dd/mm/yyyy",
                language: 'th'
            });
        }
    });






    var update_modal = new Vue({
        el: '#update_modal',
        data: function() {
            return {
                terms: TERMS,
                groups: GROUPS,
                rooms: ROOMS,
                subjects: SUBJECTS,
                teachers: TEACHERS,
                item: null,

                start_selected: -1,
                end_selected: -1
            }
        },
        computed: {
            time_list: function() {
                var dt = luxon.DateTime;
                var inv = luxon.Interval;
                var start = dt.fromObject({ hours: 6 });
                var end = dt.fromObject({ hours: 23, minutes: 59 })
                var interval = inv.fromDateTimes(start, end);
                return interval.splitBy({ minutes: 15 });
            }
        },
        methods: {
            on_start_time_change: function(evt) {

                var dt = luxon.DateTime;

                if(this.start_selected != -1 && this.end_selected != -1) {
                    if(dt.fromFormat(evt.target.value, 'HH:mm') < dt.fromFormat(this.end_selected, 'HH:mm')) {
                        return this.start_selected = evt.target.value;
                    } else {
                        window.swal("Error", "เวลาเริ่มต้นต้องน้อยกว่าเวลาสิ้นสุด", "error");
                        return this.start_selected = -1;
                    }
                } else {
                    return this.start_selected = evt.target.value;
                }
            },
            on_end_time_change: function(evt) {

                var dt = luxon.DateTime;

                if(this.start_selected != -1 && this.end_selected != -1) {
                    if(dt.fromFormat(this.start_selected, 'HH:mm') < dt.fromFormat(evt.target.value, 'HH:mm')) {
                        return this.end_selected = evt.target.value;
                    } else {
                        window.swal("Error", "เวลาเริ่มต้นต้องน้อยกว่าเวลาสิ้นสุด", "error");
                        return this.end_selected = -1;
                    }
                } else {
                    return this.end_selected = evt.target.value;
                }
            },
            update_item_submit: function(evt) {
                var self = this;
                this.$validator.validateAll().then(function(passed) {
                    if(!passed) return window.swal("Error", "กรุณาใส่ข้อมูลให้ถูกต้อง");
                    var data = new FormData(evt.target);
                    axios.post("{{ route('admin_update_test') }}", data).then(function(res) {
                        console.log(res);
                        var data = res.data;
                        if(data.is_error) {
                            console.log(data.error_message);
                            return window.swal("Error", data.error_message, "error");
                        }
                        window.swal("Success", "อัพเดทเรียบร้อยแล้ว", "success");
                        $('#update_modal').modal('hide');
                        self.$emit('updated');
                    });
                });
            }
        },
        created: function() {
            var self = this;
            root_app.$on('edit', function(id) {
                self.item = Object.assign({}, root_app.$data.items.find(function(_item) {
                    console.log(_item);
                    return _item.test_id == id;
                }));
                console.log(self.item);
                $('#update_modal').modal('show');
            });
        },
        mounted: function() {
            $('.datepicker').datepicker({
                format: "dd/mm/yyyy",
                language: 'th'
            });
        }

    })

</script>


@endsection